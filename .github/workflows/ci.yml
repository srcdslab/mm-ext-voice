name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
    branches:
      - main
      - master

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        metamod-version: [b5f160ffb4bce7c4f9441639bc57fd2b6b6fe8f1]
        sdks-cs2-version: [b4b86c84086f4d281123764605026073b65fde3f]
        protobuf-version: [v3.21.8]
        protobuf-valve-version: [dd8e1524a2444379119c394c2f7d05efb2f7cc67]
        python-version: ['3.10']
        dynohook-version: [d7f8ebb059dcfb20d5800051cf1c6e702f688470]
        celt-version: [e18de7747fb1655e66bf8d291560587036bfe53c]
        include:
          - os: ubuntu-20.04
            target-archs: x86,x86_64
            sdks: cs2
            compiler_cc: gcc
            compiler_cxx: g++

    steps:
      - name: Install Linux packages
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -yq --no-install-recommends g++-multilib ${{ matrix.compiler_cc }} libogg-dev

      - name: Select compiler
        if: startsWith(runner.os, 'Linux')
        run: |
          echo "CC=${{ matrix.compiler_cc }}" >> $GITHUB_ENV
          echo "CXX=${{ matrix.compiler_cxx }}" >> $GITHUB_ENV
          ${{ matrix.compiler_cc }} --version
          ${{ matrix.compiler_cxx }} --version

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
  
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: extension

      - name: Checkout Metamod
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/metamod-source
          ref: ${{ matrix.metamod-version }}
          path: metamod-source
          submodules: recursive

      - name: Checkout hl2sdks
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/hl2sdk
          ref: ${{ matrix.sdks-cs2-version }}
          path: hl2sdk-${{ matrix.sdks }}
          submodules: recursive

      - name: Checkout valve protobuf
        uses: actions/checkout@v4
        with:
          repository: SteamDatabase/GameTracking-CS2
          ref: ${{ matrix.protobuf-valve-version }}
          path: protobuf-valve
          submodules: recursive

      - name: Checkout protobuf
        uses: actions/checkout@v4
        with:
          repository: protocolbuffers/protobuf
          ref: ${{ matrix.protobuf-version }}
          path: protobuf
          submodules: recursive

      - name: Checkout DynoHook
        uses: actions/checkout@v4
        with:
          repository: qubka/DynoHook
          ref: ${{ matrix.dynohook-version }}
          path: DynoHook
          submodules: recursive

      - name: Checkout celt
        uses: actions/checkout@v4
        with:
          repository: mumble-voip/celt-0.11.0
          ref: ${{ matrix.celt-version }}
          path: celt
          submodules: recursive

      - name: Install celt
        working-directory: celt
        run: |
          sh autogen.sh
          autoreconf -f -i -Wall,no-obsolete
          automake
          ./configure --prefix=$PWD --build=x86_64-pc-linux-gnu "CFLAGS=-m64 -D_GLIBCXX_USE_CXX11_ABI=0 -std=c++14" "CXXFLAGS=-m64 -D_GLIBCXX_USE_CXX11_ABI=0 -std=c++14" "LDFLAGS=-m64 -D_GLIBCXX_USE_CXX11_ABI=0 -std=c++14" --disable-shared --enable-static
          make -j 8
          make install

      - name: Install DynoHook
        working-directory: DynoHook
        run: |
          # C++14 compat
          sed -i 's/std::string_view name/std::string name/g' src/dynohook/registers.h

          cmake . -DCMAKE_POSITION_INDEPENDENT_CODE=ON
          make -j 8

      - name: Install AMBuild
        run: |
          python -m pip install wheel
          pip install git+https://github.com/alliedmodders/ambuild

      - name: Install protobuf
        shell: bash
        working-directory: protobuf
        run: |
          cmake . -DCMAKE_POSITION_INDEPENDENT_CODE=ON -Dprotobuf_BUILD_SHARED_LIBS=OFF -DCMAKE_CXX_STANDARD=14 -DCMAKE_INSTALL_PREFIX="$PWD"
          make -j 8
          make install

          # Conflict with tier0
          sed -i 's/const internal::ReflectionSchema\& schema,/const internal::ReflectionSchema\& schemaz,/g' include/google/protobuf/message.h

      - name: Install protobuf-valve
        shell: bash
        working-directory: protobuf-valve
        run: |
          mkdir -p cs2
          cd Protobufs
          # Conflict of definitions
          rm enums_clientserver.proto
          rm steammessages_base.proto
          ../../protobuf/bin/protoc --cpp_out=$PWD/../cs2 *.proto

      - name: Build
        working-directory: extension
        shell: bash
        env:
          BREAKPAD_SYMBOL_SERVER: ${{ secrets.BREAKPAD_SYMBOL_SERVER }}
        run: |
          ls -all ../
          mkdir build && cd build
          python ../configure.py --enable-optimize --targets=${{ matrix.target-archs }} --sdks=${{ matrix.sdks }}
          ambuild

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}
          path: extension/build/package


  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Package
        run: |
          version=`echo $GITHUB_REF | sed "s/refs\/tags\///"`
          ls -Rall
          if [ -d "./Linux/" ]; then
            cd ./Linux/
            tar -czf ../${{ github.event.repository.name }}-${version}-linux.tar.gz -T <(\ls -1)
            cd -
          fi
          if [ -d "./macOS/" ]; then
            cd ./macOS/
            tar -czf ../${{ github.event.repository.name }}-${version}-mac.tar.gz -T <(\ls -1)
            cd -
          fi
          if [ -d "./Windows/" ]; then
            cd ./Windows/
            tar -czf ../${{ github.event.repository.name }}-${version}-windows.tar.gz -T <(\ls -1)
            cd -
          fi

      - name: Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: '*.tar.gz'
          tag: ${{ github.ref }}
          file_glob: true
